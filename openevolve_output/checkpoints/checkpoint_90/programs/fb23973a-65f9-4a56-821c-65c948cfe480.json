{"id": "fb23973a-65f9-4a56-821c-65c948cfe480", "code": "# initial_program.py\n\nimport random\n\n# EVOLVE-BLOCK-START\ndef run_search():\n    n = 47\n    # all grid points\n    grid = [(x,y) for x in range(n) for y in range(n)]\n    S = []\n\n    def distance_to_S(point):\n        if not S:\n            return 0  # Maximize initial point's chances\n        return min((point[0] - existing_point[0])**2 + (point[1] - existing_point[1])**2 for existing_point in S)\n\n    grid.sort(key=distance_to_S, reverse=True)  # Sort by distance, further points first\n\n    for (x,y) in grid:\n        ok = True\n        # check collinearity against every point already in S\n        for i in range(len(S)):\n            x1,y1 = S[i]\n            # check collinearity against every other point already in S\n            for j in range(i+1, len(S)):\n                x2,y2 = S[j]\n                # collinear iff (y2-y1)*(x - x1) == (y - y1)*(x2 - x1)\n                if (y2 - y1)*(x - x1) == (y - y1)*(x2 - x1):\n                    ok = False\n                    break\n            if not ok:\n                break\n        if ok:\n            S.append((x,y))\n    return S\n# EVOLVE-BLOCK-END ", "language": "python", "parent_id": "5f5b8f12-6d6b-4e59-a691-d02f38cb7d86", "generation": 3, "timestamp": 1748146075.3075335, "iteration_found": 72, "metrics": {"point_count": 65.0, "overall_score": 65.0, "runtime": 0.10984563827514648, "valid_solution": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 22 lines with 27 lines", "parent_metrics": {"point_count": 74.0, "overall_score": 0.0, "runtime": 0.17511677742004395, "valid_solution": 0.0}}}