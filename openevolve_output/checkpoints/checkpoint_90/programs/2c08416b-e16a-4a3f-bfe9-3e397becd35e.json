{"id": "2c08416b-e16a-4a3f-bfe9-3e397becd35e", "code": "# initial_program.py\n\nimport random\n\n# EVOLVE-BLOCK-START\ndef run_search():\n    n = 47\n    S = []\n\n    # Start with a base set of points using a different cubic residue variant. This can often lead to a larger initial set.\n    for i in range(n):\n      S.append((i, (i**3 + i) % n))\n    \n    S = list(set(S))\n    \n    # Optimize the collinearity check. Instead of checking all pairs of points in S, we can iterate through\n    # the existing points in S and use the cross-product to determine collinearity which can reduce the\n    # number of calculations, improving efficiency.\n\n    def is_collinear(p1, p2, p3):\n        x1, y1 = p1\n        x2, y2 = p2\n        x3, y3 = p3\n        return (y2 - y1) * (x3 - x2) == (y3 - y2) * (x2 - x1)\n    \n    grid = [(x, y) for x in range(n) for y in range(n)]\n    for x, y in grid:\n        if (x, y) not in S:\n            valid = True\n            for p1 in S:\n                if is_collinear((x, y), p1, (S[0] if len(S) > 0 else (0,0))): # Check with the first element\n                  valid = False\n                  break\n            if valid:\n              S.append((x,y))\n\n    return S\n# EVOLVE-BLOCK-END ", "language": "python", "parent_id": "86a14523-4a6b-4b16-bc97-470373dc9eac", "generation": 4, "timestamp": 1748146034.8797758, "iteration_found": 66, "metrics": {"point_count": 47.0, "overall_score": -1000.0, "runtime": 0.005197048187255859, "valid_solution": 0.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 33 lines with 30 lines", "parent_metrics": {"point_count": 76.0, "overall_score": 0.0, "runtime": 0.2706413269042969, "valid_solution": 0.0}}}