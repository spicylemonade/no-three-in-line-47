{"id": "da72627c-0e01-450a-9025-6bb0ed1bd2fe", "code": "# initial_program.py\n\nimport random\n\n# EVOLVE-BLOCK-START\ndef run_search():\n    n = 47\n    S = []\n\n    # Use a better performing quadratic residue strategy.\n    for i in range(n):\n        S.append((i, (i * i) % n))\n\n    # Attempt to add more points to increase the size of S. We iterate through all grid points\n    # and check if adding them to S would violate the no-three-in-line condition.\n    grid = [(x, y) for x in range(n) for y in range(n)]\n    \n    # Create a set for faster checking if a point is in S\n    S_set = set(S)\n\n    for x, y in grid:\n        if (x, y) not in S_set:\n            valid = True\n            for p1 in S:\n                for p2 in S:\n                    if p1 != p2:\n                        # Check if (x, y), p1, and p2 are collinear\n                        x1, y1 = p1\n                        x2, y2 = p2\n                        if (y - y1) * (x2 - x1) == (y2 - y1) * (x - x1):\n                            valid = False\n                            break\n                if not valid:\n                    break\n            if valid:\n                S.append((x, y))\n                S_set.add((x, y)) # keep S_set in sync\n\n    # S = list(set(S)) # Removing this as S_set ensures no duplicates exist.\n    \n    return S\n# EVOLVE-BLOCK-END ", "language": "python", "parent_id": "d3cf74d9-828a-4358-8cb6-5b5637d45afd", "generation": 5, "timestamp": 1748146179.591065, "iteration_found": 81, "metrics": {"point_count": 75.0, "overall_score": 75.0, "runtime": 0.2427666187286377, "valid_solution": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 9 lines with 5 lines\nChange 2: Replace 25 lines with 24 lines", "parent_metrics": {"point_count": 76.0, "overall_score": -1000.0, "runtime": 0.21874690055847168, "valid_solution": 0.0}}}