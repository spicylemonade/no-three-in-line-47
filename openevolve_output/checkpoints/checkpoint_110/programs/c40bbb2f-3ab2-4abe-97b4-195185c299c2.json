{"id": "c40bbb2f-3ab2-4abe-97b4-195185c299c2", "code": "# initial_program.py\n\nimport random\n\n# EVOLVE-BLOCK-START\ndef run_search():\n    n = 47\n    S = []\n    \n    # Add points based on a quadratic residue sequence. This helps avoid collinearity.\n    for i in range(n):\n        S.append((i, (i*i) % n))\n\n    def is_collinear(p1, p2, p3):\n        x1, y1 = p1\n        x2, y2 = p2\n        x3, y3 = p3\n        return (y2 - y1) * (x3 - x2) == (y3 - y2) * (x2 - x1)\n\n    # Verify no three points are collinear. If they are, remove the last added point and try to find a replacement. This verification is computationally expensive and likely unnecessary given the method used to generate the points. Removing this should significantly improve the runtime.\n    \n    # i = 0\n    # while i < len(S):\n    #     j = i + 1\n    #     while j < len(S):\n    #         k = j + 1\n    #         while k < len(S):\n    #             if is_collinear(S[i], S[j], S[k]):\n    #                 # Remove the last added point and try a different one\n    #                 del S[k]\n    #                 k = j # restart k loop after deletion\n    #                 continue\n    #             k += 1\n    #         j += 1\n    #     i += 1\n\n    return S\n# EVOLVE-BLOCK-END ", "language": "python", "parent_id": "c9eaacce-e586-42c7-b2fb-cb9e00d14f65", "generation": 3, "timestamp": 1748145521.479677, "iteration_found": 32, "metrics": {"point_count": 47.0, "overall_score": 47.0, "runtime": 0.023761510848999023, "valid_solution": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 16 lines with 16 lines", "parent_metrics": {"point_count": 47.0, "overall_score": 47.0, "runtime": 0.04398036003112793, "valid_solution": 1.0}}}