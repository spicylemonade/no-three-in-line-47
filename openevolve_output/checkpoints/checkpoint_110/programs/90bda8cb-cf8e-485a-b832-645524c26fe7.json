{"id": "90bda8cb-cf8e-485a-b832-645524c26fe7", "code": "# initial_program.py\n\nimport random\n\n# EVOLVE-BLOCK-START\ndef run_search():\n    n = 47\n    S = []\n    \n    # Use a cubic residue strategy. This is generally a good approach.\n    for i in range(n):\n        S.append((i, (i*i*i) % n))\n\n    # Remove duplicate points from S, if any.  This is a good practice.\n    S = list(set(S))\n\n    # Attempt to add more points to increase the size of S. We iterate through all grid points\n    # and check if adding them to S would violate the no-three-in-line condition. This is slow.\n    # grid = [(x, y) for x in range(n) for y in range(n)]\n    # for x, y in grid:\n    #     if (x, y) not in S:\n    #         valid = True\n    #         for p1 in S:\n    #             for p2 in S:\n    #                 if p1 != p2:\n    #                     # Check if (x, y), p1, and p2 are collinear\n    #                     x1, y1 = p1\n    #                     x2, y2 = p2\n    #                     if (y - y1) * (x2 - x1) == (y2 - y1) * (x - x1):\n    #                         valid = False\n    #                         break\n    #             if not valid:\n    #                 break\n    #         if valid:\n    #             S.append((x, y))\n\n    # S = list(set(S))\n    \n    return S\n# EVOLVE-BLOCK-END ", "language": "python", "parent_id": "86a14523-4a6b-4b16-bc97-470373dc9eac", "generation": 4, "timestamp": 1748145518.7438874, "iteration_found": 31, "metrics": {"point_count": 47.0, "overall_score": -1000.0, "runtime": 0.0019104480743408203, "valid_solution": 0.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 4 lines with 3 lines\nChange 2: Replace 21 lines with 21 lines", "parent_metrics": {"point_count": 76.0, "overall_score": 0.0, "runtime": 0.2706413269042969, "valid_solution": 0.0}}}