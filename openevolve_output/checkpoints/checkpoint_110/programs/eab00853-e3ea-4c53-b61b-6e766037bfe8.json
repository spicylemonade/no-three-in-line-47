{"id": "eab00853-e3ea-4c53-b61b-6e766037bfe8", "code": "# initial_program.py\n\nimport random\n\n# EVOLVE-BLOCK-START\ndef run_search():\n    n = 47\n    # all grid points\n    grid = [(x,y) for x in range(n) for y in range(n)]\n    S = []\n    best_S = []\n    best_len = 0\n    for offset in range(n):\n        S = []\n        for x in range(n):\n            S.append((x, (x*x + offset) % n))\n        \n        # Basic collinearity check (can be optimized)\n        valid = True\n        for i in range(len(S)):\n            for j in range(i+1, len(S)):\n                for k in range(j+1, len(S)):\n                    x1, y1 = S[i]\n                    x2, y2 = S[j]\n                    x3, y3 = S[k]\n                    if (y2-y1)*(x3-x2) == (y3-y2)*(x2-x1):\n                        valid = False\n                        break\n                if not valid:\n                    break\n            if not valid:\n                break\n\n        if valid:\n            if len(S) > best_len:\n                best_len = len(S)\n                best_S = S\n    \n    if best_len > 0:\n        print(len(best_S))\n        return best_S\n    else:\n        # Fallback to original quadratic residue if no valid solution found\n        S = []\n        for x in range(n):\n            S.append((x, (x*x) % n))\n        print(len(S))\n        return S\n# EVOLVE-BLOCK-END ", "language": "python", "parent_id": "3f1a2ca7-4f37-4248-8906-0ff16a32b759", "generation": 5, "timestamp": 1748146248.4539878, "iteration_found": 87, "metrics": {"point_count": 47.0, "overall_score": 47.0, "runtime": 0.1719801425933838, "valid_solution": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 5 lines with 39 lines", "parent_metrics": {"point_count": 47.0, "overall_score": 47.0, "runtime": 0.0052983760833740234, "valid_solution": 1.0}}}