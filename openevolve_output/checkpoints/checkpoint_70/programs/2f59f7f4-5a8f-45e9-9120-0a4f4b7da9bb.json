{"id": "2f59f7f4-5a8f-45e9-9120-0a4f4b7da9bb", "code": "# initial_program.py\n\nimport random\n\n# EVOLVE-BLOCK-START\ndef run_search():\n    n = 47\n    S = []\n\n    # Add points based on a quadratic residue sequence. This helps avoid collinearity.\n    # Using a prime number close to n to help distribute the points more evenly.\n    p = 43  # A prime number close to 47\n    for i in range(n):\n        S.append((i, (i * i) % p))\n\n    def is_collinear(p1, p2, p3):\n        x1, y1 = p1\n        x2, y2 = p2\n        x3, y3 = p3\n        return (y2 - y1) * (x3 - x2) == (y3 - y2) * (x2 - x1)\n\n    # Verify no three points are collinear. If they are, remove the last added point.\n    # Instead of removing the last point, we will remove the point that is causing the collinearity issue, which can be any of the three\n    i = 0\n    while i < len(S) - 2:\n        j = i + 1\n        while j < len(S) - 1:\n            k = j + 1\n            while k < len(S):\n                if is_collinear(S[i], S[j], S[k]):\n                    # Remove the point causing collinearity. Removing S[k] is not always the best choice\n                    # Let's try removing S[j] to see if it helps find more points\n                    del S[j]\n                    j = i  # restart j loop after deletion\n                    k = j + 1\n                    continue\n                k += 1\n            j += 1\n        i += 1\n\n    return S\n# EVOLVE-BLOCK-END ", "language": "python", "parent_id": "c9eaacce-e586-42c7-b2fb-cb9e00d14f65", "generation": 3, "timestamp": 1748144672.073408, "iteration_found": 23, "metrics": {"point_count": 2.0, "overall_score": 2.0, "runtime": 0.003809690475463867, "valid_solution": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 30 lines with 34 lines", "parent_metrics": {"point_count": 47.0, "overall_score": 47.0, "runtime": 0.04398036003112793, "valid_solution": 1.0}}}